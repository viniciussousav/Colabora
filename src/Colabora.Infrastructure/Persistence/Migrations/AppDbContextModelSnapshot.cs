// <auto-generated />
using System;
using Colabora.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Colabora.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Colabora.Domain.Entities.Organization", b =>
                {
                    b.Property<int>("OrganizationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrganizationId"), 1L, 1);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Interests")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OrganizationId");

                    b.HasAlternateKey("Email");

                    b.ToTable("ORGANIZATION", (string)null);
                });

            modelBuilder.Entity("Colabora.Domain.Entities.Participation", b =>
                {
                    b.Property<int>("SocialActionId")
                        .HasColumnType("int");

                    b.Property<int>("VolunteerId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("JoinedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("SocialActionId", "VolunteerId");

                    b.HasIndex("VolunteerId");

                    b.ToTable("PARTICIPATION", (string)null);
                });

            modelBuilder.Entity("Colabora.Domain.Entities.SocialAction", b =>
                {
                    b.Property<int>("SocialActionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SocialActionId"), 1L, 1);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Interests")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("OccurrenceDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VolunteerCreatorId")
                        .HasColumnType("int");

                    b.HasKey("SocialActionId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("VolunteerCreatorId");

                    b.ToTable("SOCIAL_ACTION", (string)null);
                });

            modelBuilder.Entity("Colabora.Domain.Entities.Volunteer", b =>
                {
                    b.Property<int>("VolunteerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VolunteerId"), 1L, 1);

                    b.Property<DateTimeOffset>("Birthdate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("CreateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Interests")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VolunteerId");

                    b.HasAlternateKey("Email");

                    b.ToTable("VOLUNTEER", (string)null);
                });

            modelBuilder.Entity("Colabora.Domain.Entities.Participation", b =>
                {
                    b.HasOne("Colabora.Domain.Entities.SocialAction", "SocialAction")
                        .WithMany("Participations")
                        .HasForeignKey("SocialActionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Colabora.Domain.Entities.Volunteer", "Volunteer")
                        .WithMany("Participations")
                        .HasForeignKey("VolunteerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("SocialAction");

                    b.Navigation("Volunteer");
                });

            modelBuilder.Entity("Colabora.Domain.Entities.SocialAction", b =>
                {
                    b.HasOne("Colabora.Domain.Entities.Organization", "Organization")
                        .WithMany("SocialActions")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ORGANIZATION");

                    b.HasOne("Colabora.Domain.Entities.Volunteer", null)
                        .WithMany()
                        .HasForeignKey("VolunteerCreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_VOLUNTEER");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("Colabora.Domain.Entities.Organization", b =>
                {
                    b.Navigation("SocialActions");
                });

            modelBuilder.Entity("Colabora.Domain.Entities.SocialAction", b =>
                {
                    b.Navigation("Participations");
                });

            modelBuilder.Entity("Colabora.Domain.Entities.Volunteer", b =>
                {
                    b.Navigation("Participations");
                });
#pragma warning restore 612, 618
        }
    }
}
